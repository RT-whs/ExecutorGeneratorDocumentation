{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"about/","title":"About","text":"<p>This documentation is created for JAG-WHS plc programmers. Can be used from server or downloaded locally. Uses only english language. Allows editing for readers.</p> <p>Contains these domains:  </p> <ul> <li>This documentation  </li> <li>Executor generator  </li> <li>B+R plc  </li> <li>Siemens plc  </li> <li>Kuka robots  </li> <li>Fanuc robots</li> <li>Remote control by rc.whs.cz    </li> </ul>"},{"location":"Ipm/IpmAlarmInterface/","title":"Alarm sending from PLC to IPM","text":""},{"location":"Ipm/IpmAlarmInterface/#description","title":"Description","text":"<p>The main idea of the alarm reader is that we use one general structure for collecting alarms in different language versions and sending them to an HTTPS server. These alarms are stored in a unified format, eliminating the need for custom programming to adjust the core functionality.</p>"},{"location":"Ipm/IpmAlarmInterface/#implemetation","title":"Implemetation","text":"<ul> <li>The source codes are available for download at the end of the documentation.</li> </ul>"},{"location":"Ipm/IpmAlarmInterface/#configuration-view","title":"Configuration View","text":"<ul> <li>Add the configuration file .mpAlarmXHistory to the project.</li> <li> <p>Ensure the number of elements in this configuration matches the maximum number of languages used in the program variables.</p> <p></p> </li> <li> <p>The settings for all elements should be the same as shown in the image below:</p> <p></p> </li> <li> <p>Insert the program into CPU.sw, to the same Cyclic as AlarmCore.</p> <p></p> </li> <li> <p>Create an SSL configuration and add certificates to the connection.</p> <p> </p> </li> </ul>"},{"location":"Ipm/IpmAlarmInterface/#logical-view","title":"Logical view","text":"<ul> <li> <p>Copy the program into the Logical View of the project.</p> <p></p> </li> </ul>"},{"location":"Ipm/IpmAlarmInterface/#description-of-the-data-types-and-variables","title":"Description of the data types and variables","text":""},{"location":"Ipm/IpmAlarmInterface/#data-types","title":"Data types","text":"<p>AlarmText - Stores the alarm message in multiple languages. - Includes a language code and a localized alarm message.</p> <p>AlarmMessage - Represents a single alarm with metadata. - Defines the alarm name, severity level, state, and multilingual descriptions.</p> <p>AlarmReader - Reads and processes alarms. - Manages the alarm processing steps and includes a timer for handling delays.</p> <p>AlarmSender - Prepares and sends alarm messages over HTTP. - Handles the request structure and keeps track of the current alarm being transmitted.</p> <p>httpsClientSettings - Configures HTTPS client settings. - Defines server details, API endpoint, and response handling.</p> <p></p>"},{"location":"Ipm/IpmAlarmInterface/#variables","title":"Variables","text":"<p>alarmProcessingBlocked - Indicates whether alarm processing is currently blocked. - By default, sending is blocked after the PLC starts until the first acknowledgment is pressed.</p> <p>SslOpen - Loads SSL configuration ident.</p> <p>sslIdent - Stores ssl ident</p> <p>Client - Defines the HTTPS client instance with server settings, including host, port, and resource.</p> <p>clientSettings - Stores the configuration settings for the HTTPS client.</p> <p></p> <p>WStringToUTF8 - Converts WString data to UTF-8 encoding for proper text transmission.</p> <p>MpAlarmXHistory - Stores alarm history data.</p> <p>alarmHistMpLinks - Links alarm history to multiple language configurations.</p> <p>AlarmHistUIForIPM - Manages alarm history for user interface display in IPM.</p> <p>AlarmHistUIForIPMConn - Stores connection-related alarm history for the IPM user interface.</p> <p>GetLanguages - Retrieves available language settings.</p> <p>languages - Stores a list of available language codes.</p> <p>alarmReader - Reads and processes alarm data.</p> <p>alarmSender - Prepares and transmits alarm messages via HTTP.</p> <p>MAX_ALARMS - Defines the maximum number of alarms that can be processed. - The value is determined by the maximum number of records in AlarmHistUIForIPMConn.</p> <p>MAX_LANGUAGES - Specifies the maximum number of supported languages.</p> <p>MAX_REQUEST_LEN - Determines the maximum request length for HTTP communication.</p> <p></p>"},{"location":"Ipm/IpmAlarmInterface/#description-of-the-source-code","title":"Description of the source code","text":""},{"location":"Ipm/IpmAlarmInterface/#init","title":"Init","text":"<ul> <li>The target languages are loaded from the IAT namespace.  </li> </ul> Loading of used languages <pre><code>GetLanguages.First = true;\nGetLanguages.Namespace = (UDINT) \"IAT\";\n\nfor(int i = 0; i &lt; MAX_LANGUAGES; i++)\n{\n    GetLanguages.Execute = true;\n    ArTextSysGetNamespaceLanguages(&amp;GetLanguages);\n\n    brsstrcpy((UDINT) languages[i], (UDINT) GetLanguages.LanguageCode);\n\n    GetLanguages.Execute = false;\n    GetLanguages.First = false;\n\n    ArTextSysGetNamespaceLanguages(&amp;GetLanguages);\n    if (GetLanguages.EndOfList) break; // Exit loop if the last language is reached\n}\n</code></pre> <ul> <li>The variable alarmHistMpLinks is assigned individual MpLink values from the Configuration View.  </li> </ul> Saving MpLinks <pre><code>    alarmHistMpLinks[0] = gAlarmHistForIPM_0;\n    alarmHistMpLinks[1] = gAlarmHistForIPM_1;\n    alarmHistMpLinks[2] = gAlarmHistForIPM_2;\n    alarmHistMpLinks[3] = gAlarmHistForIPM_3;\n    alarmHistMpLinks[4] = gAlarmHistForIPM_4;\n</code></pre> <ul> <li>All MpAlarmXHistory and MpAlarmXHistory UI components are configured and started.  </li> </ul> Components configuring <pre><code>    for (int i = 0; i &lt; MAX_LANGUAGES; i++)\n    {\n        AlarmHistForIPM[i].Enable = true;\n        AlarmHistForIPM[i].ErrorReset = GlobalAck;\n        AlarmHistForIPM[i].MpLink = (UDINT) &amp;alarmHistMpLinks[i];\n        MpAlarmXHistory(&amp;AlarmHistForIPM[i]);\n\n        AlarmHistUIForIPM[i].Enable = true;\n        AlarmHistUIForIPM[i].ErrorReset = GlobalAck;\n        AlarmHistUIForIPM[i].MpLink = (UDINT) &amp;alarmHistMpLinks[i];\n        brsstrcpy((UDINT) AlarmHistUIForIPMConn[i].Language, (UDINT) languages[i]);\n        AlarmHistUIForIPM[i].UIConnect = &amp;AlarmHistUIForIPMConn[i];\n        MpAlarmXHistoryUI(&amp;AlarmHistUIForIPM[i]);\n    }   \n</code></pre> <ul> <li>Get the sslIdent</li> </ul> Getting sslIdent <pre><code>    SslOpen.Execute = true;\n    brsstrcpy((UDINT) SslOpen.Name, (UDINT) \"IPM_AlarmTLS\");\n    ArSslOpen(&amp;SslOpen);\n    sslIdent = SslOpen.Ident;\n</code></pre> <ul> <li>The httpsClient settings are initialized.  </li> </ul> Setting httpClient <pre><code>    Client.method           = httpMETHOD_POST;\n    Client.option           = httpOPTION_HTTP_11;\n    Client.sslCfgIdent      = sslIdent;\n    Client.pHost            = &amp;clientSettings.host;\n    Client.hostPort         = clientSettings.hostPort;\n    Client.pUri             = &amp;clientSettings.resource;\n    Client.pResponseData    = &amp;clientSettings.responseData;\n    Client.responseDataSize = sizeof(clientSettings.responseData);\n    Client.pRequestData     = &amp;alarmSender.request;\n    Client.pRequestHeader   = &amp;clientSettings.requestHeader;\n</code></pre> <ul> <li>Alarm processing blocked is enabled.</li> </ul> Alarm processing blocked <pre><code>    alarmProcessingBlocked  = true;\n</code></pre>"},{"location":"Ipm/IpmAlarmInterface/#cyclic","title":"Cyclic","text":"<ul> <li>First, the program checks whether the acknowledgment button has already been pressed.  </li> <li>If not, the program terminates.  </li> <li>If the acknowledgment flag is still set and the button is pressed, the flag is cleared, and the current alarm history is deleted. </li> </ul> Alarm processing blocked <pre><code>    if (alarmProcessingBlocked &amp;&amp; GlobalAck)\n    {\n        alarmProcessingBlocked = false;\n        ClearAlarmHistory();\n    }\n    if (alarmProcessingBlocked) return;\n</code></pre> <p>The program consists of two step-based state machines: 1. One for reading alarms in different languages and storing them in the required structure. </p> Alarm reader <pre><code>    switch (alarmReader.step)\n    {\n        case 0:\n            alarmReader.delay.IN = false;\n            if (brsstrcmp((UDINT) AlarmHistUIForIPMConn[0].AlarmList.Name[0], (UDINT) \"\") &amp;&amp; alarmReader.dataProcessed) \n            {\n                ResetAlarmMesages(alarmReader.alarmMessage);\n                alarmReader.step = 1;\n            }\n            break;\n\n        case 1:\n            alarmReader.delay.IN = true;\n            if (alarmReader.delay.Q)\n            {\n                alarmReader.delay.IN = false;\n                alarmReader.step = 2;\n            }\n            break;\n\n        case 2:\n            for (int i = 0; i &lt; MAX_ALARMS; i++)\n            {\n                if (!brsstrcmp((UDINT) AlarmHistUIForIPMConn[0].AlarmList.Message[i], (UDINT) \"\")) break;\n                brsstrcpy((UDINT) alarmReader.alarmMessage[i].name,(UDINT) AlarmHistUIForIPMConn[0].AlarmList.Name[i]);\n                alarmReader.alarmMessage[i].severity = AlarmHistUIForIPMConn[0].AlarmList.Severity[i];\n                brsstrcpy((UDINT) alarmReader.alarmMessage[i].state, (UDINT) GetAlarmState(AlarmHistUIForIPMConn[0].AlarmList.NewState[i]));\n                for (int j = 0; j &lt; MAX_LANGUAGES; j++)\n                {\n                    if (!brsstrcmp((UDINT) languages[j], (UDINT) \"\")) break;\n                    brsstrcpy((UDINT) alarmReader.alarmMessage[i].alarmText[j].language,(UDINT) AlarmHistUIForIPMConn[j].Language);\n                    brsmemcpy((UDINT) alarmReader.alarmMessage[i].alarmText[j].text,(UDINT) AlarmHistUIForIPMConn[j].AlarmList.Message[i], sizeof(AlarmHistUIForIPMConn[j].AlarmList.Message[i]));\n                }\n            }\n            alarmReader.step = 3;\n            break;\n\n        case 3:\n            ClearAlarmHistory();\n            alarmReader.dataProcessed = false;\n            alarmReader.step = 0;\n            break;      \n    }\n    TON(&amp;alarmReader.delay);\n    for (int i = 0; i &lt; MAX_LANGUAGES; i++) MpAlarmXHistoryUI(&amp;AlarmHistUIForIPM[i]);\n</code></pre> <ol> <li>Another for creating JSON data from this structure and sending alarms to the HTTP server.  </li> </ol> Alarm sender <pre><code>    switch (alarmSender.step)\n    {\n        case 0:\n            alarmSender.currentAlarm = MAX_ALARMS;\n            Client.enable = false;\n            if ((alarmReader.step == 0) &amp;&amp; !alarmReader.dataProcessed)\n            {\n                Client.enable = true;\n                alarmSender.step = 1;\n            }\n            break;\n\n        case 1:\n            for (alarmSender.currentAlarm = MAX_ALARMS; alarmSender.currentAlarm &gt;= 0; alarmSender.currentAlarm--)\n            {\n                if (brsstrcmp((UDINT) alarmReader.alarmMessage[alarmSender.currentAlarm].name, (UDINT) \"\")) break;\n            }\n\n            if (alarmSender.currentAlarm &lt;= 0)\n            {\n                alarmReader.dataProcessed = true;\n                alarmSender.step = 0;\n            }else\n            {\n                alarmSender.step = 2;\n            }\n            break;\n\n        case 2:\n            GenerateAlarmJson(alarmSender.request, &amp;alarmReader.alarmMessage[alarmSender.currentAlarm--]);\n            Client.requestDataLen = brsstrlen((UDINT) alarmSender.request);\n            clientSettings.requestHeader.contentLength = brsstrlen((UDINT) alarmSender.request);\n            Client.send = true;\n            alarmSender.step = 3;\n            break;\n\n        case 3:\n            alarmSender.delay.IN = true;\n            if ((Client.status != ERR_FUB_BUSY) || alarmSender.delay.Q)\n            {\n                Client.send = false;\n                Client.enable = false;\n                alarmSender.delay.IN = false;\n                if (alarmSender.currentAlarm &lt; 0)\n                {\n                    alarmReader.dataProcessed = true;\n                    alarmSender.step = 0;\n                }else\n                {   \n                    alarmSender.step = 2;\n                }\n            }\n            break;\n    }\n    httpsClient(&amp;Client);\n</code></pre>"},{"location":"Ipm/IpmAlarmInterface/#exit","title":"Exit","text":"<ul> <li>All components are properly terminated.  </li> <li>The HTTP client is stopped.  </li> </ul>"},{"location":"Ipm/IpmAlarmInterface/#output-json-data","title":"Output JSON Data","text":"<pre><code>{\n  \"alarmMessage\": {\n    \"Name\": \"RobExt\",\n    \"Severity\": 20,\n    \"State\": \"ACTIVE\",\n    \"AlarmTexts\": [\n      {\n        \"Language\": \"cs-CZ\",\n        \"Text\": \"Robot nen\u00ed v EXT re\u017eimu!\"\n      },\n      {\n        \"Language\": \"de\",\n        \"Text\": \"Der Roboter ist nicht im EXT-Modus!\"\n      },\n      {\n        \"Language\": \"en\",\n        \"Text\": \"The robot is not in EXT mode!\"\n      }\n    ]\n  }\n}\n</code></pre>"},{"location":"Ipm/IpmAlarmInterface/#testing","title":"Testing","text":"<ul> <li>To test alarm sending, you can use the Mockoon software:  https://mockoon.com/download/</li> </ul>"},{"location":"Ipm/IpmAlarmInterface/#project-specific-adjustments","title":"Project-Specific Adjustments","text":""},{"location":"Ipm/IpmAlarmInterface/#change-the-server-ip-address-or-port-for-sending-alarms","title":"Change the Server IP Address (or port) for Sending Alarms","text":"<ul> <li>To change the server IP address, we need to update the clientSettings.host and clientSettings.requestHeader.host variables.</li> <li>To change the server port, we need to update the clientSettings.hostPort.</li> </ul>"},{"location":"Ipm/IpmAlarmInterface/#changing-the-number-of-languages","title":"Changing the Number of Languages","text":"<ol> <li>Add Additional Elements in .mpAlarmXHistory</li> <li>Change the Variable MAX_LANGUAGES</li> <li>Connect New Elements to alarmHistMpLinks in the INIT Section</li> </ol>"},{"location":"Ipm/IpmAlarmInterface/#change-of-certificates","title":"Change of Certificates","text":"<ul> <li>We will request the cellInterfaceService certificates for the current project from the IPM team.</li> <li>Then, we will replace the existing certificates in the template with the updated ones.</li> </ul>"},{"location":"Ipm/IpmAlarmInterface/#source-code","title":"Source code","text":"<p>Complete source code for download (After clicking, it takes a moment before the download starts): AlarmMessenger</p>"},{"location":"Ipm/IpmResults/","title":"Ipm Results","text":""},{"location":"Ipm/IpmResults/#description","title":"Description","text":"<p>The main idea of ipm results is we are using one general structure for moving results from Unit (robot, machine etc) to Ipm. These results are stored in one generic form. So no programmer coding is necessary for adjusting the IPM core. The programmer only stores the data (the results) to the result structure. This structure allows in general store 10 results to the list.</p>"},{"location":"Ipm/IpmResults/#base-structures","title":"Base structures","text":"<p>Every Ipm Command data list should have this basic structure. So Std_result is defined by programmer to command in init section. Is defined datatype and register number. </p> <pre><code>    Std                    : IpmDataListStdStruct\n    Std_Result             : IpmDataListStdResultDefStruct                  \n    FixedPart              : IPM_{UnitName}_{ActionName}_Cmd_Std_DataList   //IPM_Rob_Pick_Cmd_Std_DataList\n    OptionalData           : IpmDataType{BasicDataType}Struct               //IpmDataTypeUdintStruct\n</code></pre> <p>When data comes from IPM during storing CommandStruct to UnitSlot also this Std_result is copied from init to CommandStruct in ..\\Logical\\Lib_csc\\CSC\\Ipm\\IpmSlot.typ</p> <pre><code>    CommandStruct\n            ...\n            ...\n            ...\n            internal:CommandTcpInternalStruct\n</code></pre> <p>This internal variable contains address for dynamicaly created extension params (DataDescriptorDataLists is stored for later use).  ExtensionResults is initialized by Std_Result in template function inline  IPM_RETVAL IpmSlotBase::StoreData. By this we copy information about register number and datatype. The definition is copied to working static structure IpmStdResultStruct. This is all the time statically reachable. So no dynamic alocation is necessary.</p> <pre><code>    CommandTcpInternalStruct                        \n            ExtensionParams     :CommandTcpInternalExtStruct    \n            ExtensionResults    :IpmStdResultStruct \n            ResultRequestActive :BOOL\n</code></pre> <p>IpmStdResultStruct: in ..\\Logical\\Lib_csc\\CSC\\Ipm\\IpmDatatype.typ      </p> <pre><code>    IpmStdResultStruct           : STRUCT \n        DataListNbResultExpected : USINT;\n        DataListResults          : ARRAY[0..9]OF IpmDataTypeResultStruct; (*Location for read out results from units*)\n        RequestUnitData          : stTepRegister; (*For sequence which read outs results*)\n        _indexDataListResults    : USINT := 0;\n        _wstep                   : UINT := 0; (*For sequence which read outs results*)\n    END_STRUCT;\n</code></pre> <p>IpmDataTypeResultStruct ..\\Logical\\Lib_csc\\CSC\\Ipm\\IpmDatatype.typ This is a structure for storing every one result.</p> <pre><code>    IpmDataTypeResultStruct :   STRUCT \n        Value           : ARRAY[0..80]OF USINT; (*Value of var  IPM &lt;-&gt; UNIT   reinpreter cast of results values.The reciever knows which datatypes are needed*)\n        UnitRegisterNo  : UINT; (*Unit/Robot register index to store user variable 1000..65000*)\n        DataTypeCode    : USINT := 3;\n        StringLenght    : USINT; (*Used for Strings number of char used in result*)\n    END_STRUCT;\n</code></pre> <p>Data stored to the array of 81 unsigned integers. And every data array has defined data type code. This code describes in which types are data stored in array. When string is present also the string length is used. </p>"},{"location":"Ipm/IpmResults/#unitregisterno","title":"UnitRegisterNo","text":"<p>In internal unit memory. IPM expects the every unit will have own set of registers. This registers are internal memory of units. The readout process address and read selected registers. Move this data throw the generic instance from unit to IPM. </p>"},{"location":"Ipm/IpmResults/#unit-steps","title":"Unit Steps","text":"<ol> <li>Unit store result during process to internal register.</li> </ol>"},{"location":"Ipm/IpmResults/#cmd-finish","title":"Cmd finish","text":"<p>After every cmd finished is called function LoadResultStruct() which basically set ResultRequestActive in internal substructure of IPM command.</p>"},{"location":"Ipm/IpmResults/#tep-steps-to-read-outs","title":"Tep steps to read outs","text":"<ol> <li><code>ReadRegisterFromUnit()</code>  - function to read from unit to Tep (not for TepDataConventer, or generic Ipm_Fieldbus, or future RobotModuleV2) no programmer change</li> <li><code>FuResult_Generic()</code>  - In IPM Tep instance (in generic TEP not for TepDataConventer) no programmer change</li> <li><code>ReadoutResult()</code>  - Cyclical service calling FuResult_Generic (in generic TEP not for TepDataConventer). Checking if ResultRequestActive is setted by cmd 101. If yes call readout till finish. no programmer change</li> <li>Data are prepared for IPM in ExtensionResults of current cmd.</li> </ol>"},{"location":"Ipm/IpmResults/#tep-data-converter-read-out","title":"Tep Data converter read out","text":"<ol> <li>In Unit_IpmTepConverter.st we use CommandResult.st where is written logic by programmer to readout values from unit. </li> </ol>"},{"location":"Ipm/IpmResults/#steps-to-handle-cmd101-readout-results-from-ipm","title":"Steps to handle Cmd101 Readout results from IPM","text":"<ol> <li><code>Deserialize()</code></li> <li><code>IPM_RETVAL GetCmdResults()</code> Create answer to IPM. Take data from Internal\\ExtensionResults of selected command. The data creating is generic. No programmer effort needed.</li> <li><code>CreateOneItemResultAnswer()</code> Function adding to result stream results one by one. Should be called from loop.</li> </ol>"},{"location":"Ipm/IpmResults/#open-points","title":"Open points","text":"<ul> <li>Unit tests.</li> </ul>"},{"location":"Ipm/IpmResults/#adam-points","title":"Adam points","text":""},{"location":"docu/","title":"How to use this documentation","text":""},{"location":"docu/#online-using","title":"Online using","text":"<p>Simply open this link for Whs online documentation https://rt-whs.github.io/ExecutorGeneratorDocumentation/</p>"},{"location":"docu/#offline-installation","title":"Offline installation","text":"<p>Follow this guide to install this documentation on your machine.  </p> <ol> <li>Download script installation script from here.</li> <li>Locate file to folder where you want download all this documentation offline.</li> <li>Open in this folder powershell terminal</li> <li> <p>Install by this cmd. When python missing will be automatically installed.  </p> <pre><code>PowerShell -ExecutionPolicy Bypass -File .\\InstallDocumentation.ps1\n</code></pre> </li> <li> <p>Download script for start and show this documentation here. and locate to same folder. Script is used for manual start of documentation. This step do Executor generator itself so with connection with app is not needed.</p> <pre><code>PowerShell -ExecutionPolicy Bypass -File .\\ShowDocumentationWeb.ps1\n</code></pre> </li> </ol>"},{"location":"docu/#source-documentation-repository","title":"Source documentation repository","text":"<p>Reached from website. Click on github icon. Main branch contains md files. Gh-pages branch contains deployed website. Every commit use CI/CD pipelines to automatic deploy webpage. https://github.com/RT-whs/ExecutorGeneratorDocumentation </p>"},{"location":"docu/#editing-locally","title":"Editing locally","text":"<p>The system MkDocs is based on python. This documentation is based on material design. Follow this steps.  </p> <ol> <li>Install VSCode. (Is recommended due very good work with folder tree)</li> <li>Install Python. You can use this link. Check the possibility \"Add Python to PATH\" to publish python to cmd line.</li> <li>Check the Python in shell cmd line by cmd <code>python --version</code></li> <li> <p>Upgrade pip installer when you have python longer by </p> <pre><code>python -m pip install --upgrade pip\n</code></pre> </li> <li> <p>Create your folder for documentation</p> </li> <li> <p>Reach in terminal to this folder and create python virtual environment. </p> <pre><code>python -m venv venv\n</code></pre> <p>Hint</p> <p>With Windows 11 in file explorer you can use right mouse click and use \"Open in Terminal\" in current folder. The path will be taken from current folder.</p> </li> <li> <p>Activate environment by script. Type in shell cmd line.    If you will use VS code than you have to activate virtual environment also for his terminal. So simply call this cmd also from there.</p> <pre><code>./venv/Sripts/activate\n</code></pre> </li> <li> <p>Install MkDocs material.  Type in shell cmd line </p> <pre><code>pip install mkdocs-material\n</code></pre> </li> <li> <p>Install plugin for mkdocs glighbox.</p> <pre><code>pip install mkdocs-glightbox\n</code></pre> </li> <li> <p>Install plugin for mkdocs for navigation. </p> <pre><code>pip install mkdocs-awesome-pages-plugin\n</code></pre> </li> <li> <p>Clone source code of docu next to venv folder. </p> <pre><code>git clone https://github.com/RT-whs/ExecutorGeneratorDocumentation project\n</code></pre> <ol> <li>In VS code you can open project by File -&gt; Open Folder (open project folder)</li> <li>Possibly in VS code you can go to Terminal -&gt; New Terminal</li> <li>Try the documentation web locally. Got to project folder (you can use also VS code terminal). Type cmd <code>mkdocs build</code></li> <li>Type cmd <code>mkdocs serve</code></li> <li>Click with ctrl on link in terminal log e.g. <code>http://127.0.0.1:8000/</code></li> <li>You can make a change each ctrl+s will update web</li> <li>When you close app or terminal you close also local web server.</li> </ol> </li> </ol>"},{"location":"docu/#publish-to-webserver","title":"Publish to webserver","text":"<p>Simply commit your change to git. The web will be automatically updated within one minute.</p>"},{"location":"docu/#getting-started","title":"Getting started","text":"<p>How to work with material design guide: How to edit this project </p>"},{"location":"eg/","title":"Executor generator","text":""},{"location":"eg/#installation","title":"Installation","text":"<p>Here is described installation of executor generator app.</p> <ol> <li>Create top folder for your installation of Executor Generator</li> <li>Download to this folder installation script.here.</li> <li> <p>Start in the folder powershell terminal and run script that install the newest version of executor generator. You will access the jag sharepoint file with security token to login. Log by your account and copy token to script.  </p> <pre><code>PowerShell -ExecutionPolicy Bypass -File .\\DeployReleaseNewestApp.ps1\n</code></pre> </li> <li> <p>Create shortcut for installed app</p> </li> </ol>"},{"location":"eg/#updates","title":"Updates","text":"<p>Application has own automatic update system. When checking public packages on git-hub. When exist new release automatically deploy on local machine after user confirmation. The server location of packages is at https://github.com/RT-whs/EGreleases/releases:</p>"},{"location":"eg/#switch-to-older-version","title":"Switch to older version","text":"<ol> <li>Copy from path <code>YourTopFolder\\DeployedApp\\Tools\\Git</code> file <code>DeployReleaseApp.ps1</code> to <code>YourTopFolder</code></li> <li> <p>Start in the folder powershell terminal and run script. Select version of executor generator which you want to use. Type vX.X.X format to select version.  </p> <pre><code>PowerShell -ExecutionPolicy Bypass -File .\\DeployReleaseApp.ps1\n</code></pre> </li> <li> <p>After installation finish you can start selected version. </p> </li> <li>When app start do not automatically update app to newest version. </li> </ol>"},{"location":"eg/LibraryManager/","title":"Library system in Executor generator","text":""},{"location":"eg/ProjectStructure/","title":"Project structure","text":"<ol> <li>Create basic project structure:</li> </ol> <p>ToDo</p> <ul> <li>00_Parameters</li> <li>01_AlarmHandling</li> <li>02_PackML</li> <li>03_Wizard</li> <li>10_RecipeLogic</li> <li>20_Safety</li> <li>30_VentilSystem</li> <li>96_LoadMemoryHandle</li> <li> <p>98_PackML Handler local</p> </li> <li> <p>Do ventilov\u00fdch blok\u016f p\u0159idat um\u00edst\u011bn\u00ed </p> </li> </ul>"},{"location":"eg/SourceCodeDocu/DocumentationConventios/","title":"Documentation conventions","text":""},{"location":"eg/SourceCodeDocu/DocumentationConventios/#methods-headers","title":"Method's headers","text":"<pre><code>    /// &lt;summary&gt;\n    /// Calculates the area of a rectangle.\n    /// &lt;/summary&gt;\n    /// &lt;param name=\"width\"&gt;The width of the rectangle in meters.&lt;/param&gt;\n    /// &lt;param name=\"height\"&gt;The height of the rectangle in meters.&lt;/param&gt;\n    /// &lt;returns&gt;The area in square meters.&lt;/returns&gt;\n</code></pre>"},{"location":"eg/SourceCodeDocu/Engineering/EngineeringStructure/","title":"Executor generator engineering","text":""},{"location":"eg/SourceCodeDocu/Engineering/EngineeringStructure/#project-structure","title":"Project structure","text":"<pre>\n<pre><code>ProjectName/\n\u251c\u2500\u2500 Project\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 Controllers\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 plc\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 Devices\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 Cameras\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 Robots\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 Docu\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 Engineering\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 Hmi\n\u2514\u2500\u2500 Resources\n    \u251c\u2500\u2500 Dockers\n    \u251c\u2500\u2500 Libraries\n    \u251c\u2500\u2500 DeviceDescriptionFiles\n    \u251c\u2500\u2500 Pictures\n    \u2514\u2500\u2500 Tools\n</code></pre>\n</pre> <p>Our projects usually consist from many devices and many sw projects. To keep it well organized we want use tree structure which we will pack to plc like one project. Thanks this we can keep same versions of plcs, robots etc in one project. To pdm folder roboters you can share some note about version in this package. This structure will use also executor generator for work with every project.</p>"},{"location":"eg/SourceCodeDocu/Engineering/EngineeringStructure/#controllers","title":"Controllers","text":"<p>If you have many plc in splitted projects you can create here more folders for every plc one.</p>"},{"location":"eg/SourceCodeDocu/Engineering/EngineeringStructure/#devices","title":"Devices","text":"<p>Every device which has own project or settings should be actual here. </p>"},{"location":"eg/SourceCodeDocu/Engineering/EngineeringStructure/#docu","title":"Docu","text":"<p>For devices especially some rare used store here their manuals. Eplan IO export</p>"},{"location":"eg/SourceCodeDocu/Engineering/EngineeringStructure/#engineering","title":"Engineering","text":"<p>Folder for executor generator project</p>"},{"location":"eg/SourceCodeDocu/Engineering/EngineeringStructure/#hmi","title":"Hmi","text":"<p>When separate Hmi used. Also can be foldered to many separated devices.</p>"},{"location":"eg/SourceCodeDocu/Engineering/EngineeringStructure/#resources","title":"Resources","text":"<p>Everything needed for project bud not essentials part of that.  </p>"},{"location":"eg/SourceCodeDocu/Engineering/TagGenerator/","title":"Tag generator","text":""},{"location":"eg/SourceCodeDocu/Engineering/swblock/","title":"Sw blocks","text":""},{"location":"functions/KUKA/Sync/","title":"Synchronization function between KUKA robots","text":"<p>Warning</p> <p>This function is not tested yet and may not work correctly!</p>"},{"location":"functions/KUKA/Sync/#overview","title":"Overview","text":"<p>This function is used for synchronization between robots. Function has commands #READY, #PROCESSING, #DONE, #ERROR and #RESET_ALL.</p>"},{"location":"functions/KUKA/Sync/#implementation","title":"Implementation","text":"Expand to show implemetation config.datSendSyncMess.srcReceiveSyncMess.srcSPS <pre><code>    ENUM SYNC_OPERATION READY, PROCESSING, DONE, ERROR, RESET_ALL\n    DECL SYNC_OPERATION SYNC_CMD\n    DECL INT THIS_ROBOT_ID = 1 ; unique number in array of sync... NOT 0 !!! num 1 - 10\n    DECL INT MAX_ROBOTS_NUM = 10\n    DECL BOOL bSYNC_ROB_READY[10]\n    DECL BOOL bSYNC_ROB_PROCESSING[10]\n    DECL BOOL bSYNC_ROB_DONE[10]\n    DECL BOOL bSYNC_ROB_ERROR[10]\n    DECL SYNC_OPERATION SYNC_ACTIVATE[10]\n\n    ; Here mapp input signals. Signal [1] means robot 1, [2] means robot 2,...\n    DECL INT SYNC_IN_READY[10]\n    SYNC_IN_READY[1]  = 101     ; signal IN[1026] means always FALSE\n    SYNC_IN_READY[2]  = 102     ; signal IN[1026] means always FALSE\n    SYNC_IN_READY[3]  = 103     ; signal IN[1026] means always FALSE\n    SYNC_IN_READY[4]  = 104     ; signal IN[1026] means always FALSE\n    SYNC_IN_READY[5]  = 105     ; signal IN[1026] means always FALSE\n    SYNC_IN_READY[6]  = 106     ; signal IN[1026] means always FALSE\n    SYNC_IN_READY[7]  = 107     ; signal IN[1026] means always FALSE\n    SYNC_IN_READY[8]  = 108     ; signal IN[1026] means always FALSE\n    SYNC_IN_READY[9]  = 109     ; signal IN[1026] means always FALSE\n    SYNC_IN_READY[10] = 110     ; signal IN[1026] means always FALSE\n\n    DECL INT SYNC_IN_PROCESSING[10]\n    SYNC_IN_PROCESSING[1]  = 111     ; signal IN[1026] means always FALSE\n    SYNC_IN_PROCESSING[2]  = 112     ; signal IN[1026] means always FALSE\n    SYNC_IN_PROCESSING[3]  = 113     ; signal IN[1026] means always FALSE\n    SYNC_IN_PROCESSING[4]  = 114     ; signal IN[1026] means always FALSE\n    SYNC_IN_PROCESSING[5]  = 115     ; signal IN[1026] means always FALSE\n    SYNC_IN_PROCESSING[6]  = 116     ; signal IN[1026] means always FALSE\n    SYNC_IN_PROCESSING[7]  = 117     ; signal IN[1026] means always FALSE\n    SYNC_IN_PROCESSING[8]  = 118     ; signal IN[1026] means always FALSE\n    SYNC_IN_PROCESSING[9]  = 119     ; signal IN[1026] means always FALSE\n    SYNC_IN_PROCESSING[10] = 120     ; signal IN[1026] means always FALSE\n\n    DECL INT SYNC_IN_DONE[10]\n    SYNC_IN_DONE[1]  = 121     ; signal IN[1026] means always FALSE\n    SYNC_IN_DONE[2]  = 122     ; signal IN[1026] means always FALSE\n    SYNC_IN_DONE[3]  = 123     ; signal IN[1026] means always FALSE\n    SYNC_IN_DONE[4]  = 124     ; signal IN[1026] means always FALSE\n    SYNC_IN_DONE[5]  = 125     ; signal IN[1026] means always FALSE\n    SYNC_IN_DONE[6]  = 126     ; signal IN[1026] means always FALSE\n    SYNC_IN_DONE[7]  = 127     ; signal IN[1026] means always FALSE\n    SYNC_IN_DONE[8]  = 128     ; signal IN[1026] means always FALSE\n    SYNC_IN_DONE[9]  = 129     ; signal IN[1026] means always FALSE\n    SYNC_IN_DONE[10] = 130     ; signal IN[1026] means always FALSE\n\n    DECL INT SYNC_IN_ERROR[10]\n    SYNC_IN_ERROR[1]  = 131     ; signal IN[1026] means always FALSE\n    SYNC_IN_ERROR[2]  = 132     ; signal IN[1026] means always FALSE\n    SYNC_IN_ERROR[3]  = 133     ; signal IN[1026] means always FALSE\n    SYNC_IN_ERROR[4]  = 134     ; signal IN[1026] means always FALSE\n    SYNC_IN_ERROR[5]  = 135     ; signal IN[1026] means always FALSE\n    SYNC_IN_ERROR[6]  = 136     ; signal IN[1026] means always FALSE\n    SYNC_IN_ERROR[7]  = 137     ; signal IN[1026] means always FALSE\n    SYNC_IN_ERROR[8]  = 138     ; signal IN[1026] means always FALSE\n    SYNC_IN_ERROR[9]  = 139     ; signal IN[1026] means always FALSE\n    SYNC_IN_ERROR[10] = 140     ; signal IN[1026] means always FALSE\n\n    ; Here mapp output signals.\n    DECL INT SYNC_OUT_READY       = 100 ; First bit for output signal -&gt; program then add THIS_ROBOT_ID to use correct out signal\n    DECL INT SYNC_OUT_PROCESSING  = 110 ; First bit for output signal -&gt; program then add THIS_ROBOT_ID to use correct out signal\n    DECL INT SYNC_OUT_DONE        = 120 ; First bit for output signal -&gt; program then add THIS_ROBOT_ID to use correct out signal\n    DECL INT SYNC_OUT_ERROR       = 130 ; First bit for output signal -&gt; program then add THIS_ROBOT_ID to use correct out signal\n</code></pre> <pre><code>    &amp;ACCESS RVP\n    &amp;PARAM EDITMASK = *\n    DEF SendSyncMess( CMD:IN )\n\n    ; ------------------------------- Usage --------------------------------\n    ; Use in program just like this -&gt; SendSyncMess(cmd)\n    ; cmd: #READY, #PROCESSING, #DONE, #ERROR, #RESET_ALL\n    ;\n    ; On the specific cmd, function set the correspond output to TRUE or FALSE\n\n    DECL SYNC_OPERATION CMD\n\n    SWITCH CMD\n        CASE #READY\n            $OUT[SYNC_OUT_READY + THIS_ROBOT_ID]      = TRUE\n            $OUT[SYNC_OUT_PROCESSING + THIS_ROBOT_ID] = FALSE\n            $OUT[SYNC_OUT_DONE + THIS_ROBOT_ID]       = FALSE\n            $OUT[SYNC_OUT_ERROR + THIS_ROBOT_ID]      = FALSE\n\n        CASE #PROCESSING\n            $OUT[SYNC_OUT_READY + THIS_ROBOT_ID]      = FALSE\n            $OUT[SYNC_OUT_PROCESSING + THIS_ROBOT_ID] = TRUE\n            $OUT[SYNC_OUT_DONE + THIS_ROBOT_ID]       = FALSE\n            $OUT[SYNC_OUT_ERROR + THIS_ROBOT_ID]      = FALSE\n\n        CASE #DONE\n            $OUT[SYNC_OUT_READY + THIS_ROBOT_ID]      = FALSE\n            $OUT[SYNC_OUT_PROCESSING + THIS_ROBOT_ID] = FALSE\n            $OUT[SYNC_OUT_DONE + THIS_ROBOT_ID]       = TRUE\n            $OUT[SYNC_OUT_ERROR + THIS_ROBOT_ID]      = FALSE\n\n        CASE #ERROR\n            $OUT[SYNC_OUT_READY + THIS_ROBOT_ID]      = FALSE\n            $OUT[SYNC_OUT_PROCESSING + THIS_ROBOT_ID] = FALSE\n            $OUT[SYNC_OUT_DONE + THIS_ROBOT_ID]       = FALSE\n            $OUT[SYNC_OUT_ERROR + THIS_ROBOT_ID]      = TRUE\n\n        CASE #RESET_ALL\n            $OUT[SYNC_OUT_READY + THIS_ROBOT_ID]      = FALSE\n            $OUT[SYNC_OUT_PROCESSING + THIS_ROBOT_ID] = FALSE\n            $OUT[SYNC_OUT_DONE + THIS_ROBOT_ID]       = FALSE\n            $OUT[SYNC_OUT_ERROR + THIS_ROBOT_ID]      = FALSE\n\n        DEFAULT\n            $OUT[SYNC_OUT_READY + THIS_ROBOT_ID]      = FALSE\n            $OUT[SYNC_OUT_PROCESSING + THIS_ROBOT_ID] = FALSE\n            $OUT[SYNC_OUT_DONE + THIS_ROBOT_ID]       = FALSE\n            $OUT[SYNC_OUT_ERROR + THIS_ROBOT_ID]      = FALSE\n\n    ENDSWITCH\n\n    END\n</code></pre> <pre><code>    &amp;ACCESS RVP\n    &amp;PARAM EDITMASK = *\n    DEF ReceiveSyncMess( robotID:IN, cmd:IN ) \n\n    ; ------------------------------- Usage --------------------------------\n    ; Use in program just like this -&gt; ReceiveSyncMess(cmd)\n    ; cmd: #READY, #PROCESSING, #DONE, #ERROR, #RESET_ALL\n    ;\n    ; On the specific cmd, function activate watch variable -&gt; watch variable is\n    ; used in sub program sps.\n    ;\n    ; When sps get signal from other robot then function passes throught WAIT\n    ; and continue program\n\n    DECL INT robotID\n    DECL SYNC_OPERATION cmd\n\n    IF (robotID &gt; 0) AND (robotID &lt;= MAX_ROBOTS_NUM) THEN\n\n        SYNC_ACTIVATE[robotID] = cmd\n\n        SWITCH cmd\n            CASE #READY\n                WAIT FOR bSYNC_ROB_READY[robotID]\n\n            CASE #PROCESSING\n                WAIT FOR bSYNC_ROB_PROCESSING[robotID]\n\n            CASE #DONE\n                WAIT FOR bSYNC_ROB_DONE[robotID]\n\n            CASE #ERROR\n                WAIT FOR bSYNC_ROB_ERROR[robotID]\n\n            DEFAULT\n                SYNC_ACTIVATE[robotID] = #RESET_ALL\n\n        ENDSWITCH\n\n        SYNC_ACTIVATE[robotID] = #RESET_ALL\n\n    ENDIF\n\n    END\n</code></pre> <pre><code>    ;FOLD USER DECL\n    ; Please insert user defined declarations\n        INT i\n\n    ;ENDFOLD (USER DECL)\n\n\n\n\n    ;FOLD USER INIT\n    ; Please insert user defined initialization commands\n\n        ; all sync function disable on init\n        FOR i = 1 TO MAX_ROBOTS_NUM\n            SYNC_ACTIVATE[i]        = #RESET_ALL\n            bSYNC_ROB_READY[i]      = FALSE\n            bSYNC_ROB_PROCESSING[i] = FALSE\n            bSYNC_ROB_DONE[i]       = FALSE\n            bSYNC_ROB_ERROR[i]      = FALSE\n        ENDFOR\n\n    ;ENDFOLD (USER INIT)\n\n\n\n\n    LOOP\n    ;FOLD USER PLC\n    ;Make your modifications here\n\n\n\n    FOR i = 1 TO MAX_ROBOTS_NUM\n\n        IF SYNC_ACTIVATE[i] == #RESET_ALL THEN\n            bSYNC_ROB_READY[i]      = FALSE\n            bSYNC_ROB_PROCESSING[i] = FALSE\n            bSYNC_ROB_DONE[i]       = FALSE\n            bSYNC_ROB_ERROR[i]      = FALSE\n        ENDIF\n\n        IF SYNC_ACTIVATE[i] == #READY THEN\n            IF $IN[SYNC_IN_READY[i]] THEN\n                bSYNC_ROB_READY[i] = TRUE\n            ELSE\n                bSYNC_ROB_READY[i] = FALSE\n            ENDIF\n        ENDIF\n\n        IF SYNC_ACTIVATE[i] == #PROCESSING THEN\n            IF $IN[SYNC_IN_PROCESSING[i]] THEN\n                bSYNC_ROB_PROCESSING[i] = TRUE\n            ELSE\n                bSYNC_ROB_PROCESSING[i] = FALSE\n            ENDIF\n        ENDIF\n\n        IF SYNC_ACTIVATE[i] == #DONE THEN\n            IF $IN[SYNC_IN_DONE[i]] THEN\n                bSYNC_ROB_DONE[i] = TRUE\n            ELSE\n                bSYNC_ROB_DONE[i] = FALSE\n            ENDIF\n        ENDIF\n\n        IF SYNC_ACTIVATE[i] == #ERROR THEN\n            IF $IN[SYNC_IN_ERROR[i]] THEN\n                bSYNC_ROB_ERROR[i] = TRUE\n            ELSE\n                bSYNC_ROB_ERROR[i] = FALSE\n            ENDIF\n        ENDIF\n\n    ENDFOR\n\n    ;ENDFOLD (USER PLC)\n    ENDLOOP\n</code></pre> <p>Example</p> robot_1.srcrobot_2.src <pre><code>    PTP test_1 CONT Vel=100 % PDAT103 \n\n    SendSyncMess(#READY)\n    ReceiveSyncMess(2, #DONE) ; waiting for robot 2 done\n    SendSyncMess(#RESET_ALL)\n\n    PTP test_2 CONT Vel=100 % PDAT104\n</code></pre> <pre><code>    ReceiveSyncMess(1, #READY) ; waiting for robot 1 ready\n\n    SendSyncMess(#PROCESSING)\n\n    PTP test_1 CONT Vel=100 % PDAT103 \n\n    TRIGGER WHEN DISTANCE=1 DELAY=0 DO=SendSyncMess(#DONE)\n    PTP test_2 CONT Vel=100 % PDAT104\n</code></pre>"},{"location":"magna/magna/","title":"Customer standard","text":""},{"location":"magna/magna/#plc","title":"PLC","text":"<p>Used for safety and singnal IO routing.</p>"},{"location":"magna/magna/#safety","title":"Safety","text":"<p>Usually is necessary create safety program.  Connect robots from profisafe.</p> <p>Moulding area is defined by Kuka robot safety position. Door service routine is also there, because when update kuka robot program they do not want to open door (caused by reload).</p>"},{"location":"magna/magna/#io-linking","title":"Io linking","text":"<p>Link by their order so everything manually. Name the io by previous project used numbering.</p> <p>Create linking R1-R2, R1-R3, R2-R3  </p>"},{"location":"magna/magna/#robot-interface","title":"Robot interface","text":"<ul> <li>Workspace 1-8 between robots</li> <li>Robot in home</li> <li>Robot going to home</li> <li>Last part</li> <li>25 extra bits </li> </ul>"},{"location":"magna/magna/#robot-kuka","title":"Robot KUKA","text":"<p>Usually used 3 robots. One R1 on mould machine and place conveyor. Second R2 cut and oven, cannot catch part. Third R3 is like holder. </p>"},{"location":"magna/magna/#programming-steps","title":"Programming steps","text":"<ul> <li>find on pdm specification</li> <li>Mould workspace axis specific</li> <li>use pulse source in sps</li> <li>safety zone is also source for signal e67_robot_outside_mould</li> <li>Robot outside mould <code>O_CLOSE_SAFE = WS_SOURCE + SAFETY_ZONE_MERKER</code></li> <li>SAFETY_ZONE_MERKER is accessible in Io mapping when mapp SafetyOutput to DigitalInputs</li> <li>Keep io numbers from previous project</li> <li>copy files from previous projects. Continue reading...</li> <li>adjust cell.src</li> <li>create basic production program prgXXX.src where XXX is mould/ program number</li> <li>keep safe transfer trajectories between each sub programs.</li> </ul>"},{"location":"magna/magna/#configdat","title":"$config.dat","text":"<ul> <li>standard  </li> <li>axis limits  </li> <li>io</li> <li>io linking</li> <li>gripper</li> <li>aut ext</li> <li>core driving</li> <li>gas burner</li> <li>euromap 67 - robot has own extension E67 so not interlinked with plc</li> <li>park position for robot grippers (3 positions)</li> </ul>"},{"location":"magna/magna/#used-workspaces","title":"Used workspaces","text":"<ul> <li>fill from config.dat previous </li> </ul>"},{"location":"magna/magna/#modules","title":"Modules","text":"<ul> <li>take whole folder R1/Modules and copy paste (use same numbering)  </li> <li>use in TP podprog.scr Helping for changing grippers</li> <li>copy zpravy.src</li> <li>copy whs.sps</li> </ul>"},{"location":"magna/magna/#whssps","title":"whs.sps","text":"<ul> <li>need to add interfaces between robot</li> <li>others stay like now</li> <li>copy also system/sps.sub</li> </ul>"},{"location":"magna/magna/#gripper-spottech","title":"gripper spottech","text":"<p>They use.</p>"},{"location":"magna/magna/#prgxxxsrc","title":"prgXXX.src","text":"<ul> <li>set init</li> <li>set mould number</li> <li>check home pos - with dialog \"Robot go to home directly\"</li> <li>check empty gripper is not empty drop on conveyor part</li> <li>teach the points</li> <li>use switches -M_S_function_PAM</li> <li>comment all what really is not used</li> <li>switch M_EXECUTE_RETREATE is for homing</li> <li>TakeOffParts use motion step for possible homing. Copy all. Only teach up. Move ejector conducting or coreAction() to proper code position. </li> </ul>"},{"location":"magna/magna/#deposit","title":"Deposit","text":"<p>Placing on conveyor. Can be adjusted this routine by merker. When you already down skip some points. Maybe remove when R3 will be used.</p>"},{"location":"magna/magna/#prog-vymeny","title":"Prog vymeny","text":"<p>Copy all from old to new robot. Check Tool holding positions. Serizovaci rutinu dont use.  Adjust prog vymeny_chapadel.src</p>"},{"location":"magna/magna/#troubleshooting","title":"Troubleshooting","text":"<ul> <li>Inside stop velocity changed from 0 -&gt; 10 to be able move at mould with robot on old mould machine.</li> <li>PS_KUKA_EARLY_START uses intermediate position .. but usually not necessary</li> </ul>"},{"location":"magna/magna/#homing","title":"Homing","text":"<p>Naming: Deposit Needs maintain motionstep valid. Robots have to wait till other robot reach home. (R1 waits till R2 reach home)  </p> <p>RetreatOutOfMould() - Homing from mould.  </p>"},{"location":"magna/magna/#project-numbers","title":"Project numbers","text":"<p>221057 - Magna Liberec robotizovane pracoviste 2 robots 231080 - Magna Liberec robotizovane pracoviste 3 robots (1phase only R1)  </p>"},{"location":"magna/231080%20-%20IMM%2025/IP%20addresses/","title":"231080 - IP addresses","text":""},{"location":"magna/231080%20-%20IMM%2025/IP%20addresses/#table-of-ips","title":"Table of IP's","text":"ID Name IP address Port (optional) User:Pwd (optional) Notes <code>RC01_R1</code> Kuka robot 10.90.252.11 5900 kuka UltraVNC available <code>RC01_R2</code> Kuka robot 10.90.252.12 5900 kuka UltraVNC available <code>RC01_R3</code> Kuka robot 10.90.252.13 5900 kuka UltraVNC available <code>RC01_R4 (reserve)</code> Kuka robot 10.90.252.14 5900 kuka UltraVNC available <code>81V1</code> IO signals on robot arm (R1) 10.90.252.15 <code>101V1</code> IO signals on robot arm (R2) 10.90.252.16 <code>121V1</code> IO signals on robot arm (R3) 10.90.252.17 <code>141V1 (reserve)</code> IO signals on robot arm (R4) 10.90.252.18 <code>A1</code> PLC 10.90.252.20 <code>HMI (reserve)</code> HMI reserve 10.90.252.21 <code>A300</code> Euromap 10.90.252.22 Magna:Magna%111 https://10.90.252.20 <code>TL-WR902AC</code> Wifi router 10.90.252.25 Wifi:kukakuka / Admin:Magna%111 SSID: IMM25_2.4G / IMM25_5G"},{"location":"magna/231080%20-%20IMM%2025/Overview/","title":"231080 - Robotized workplace for IMM no. 25 - Engel Duo 3200t","text":""},{"location":"magna/231080%20-%20IMM%2025/Overview/#overview","title":"Overview","text":"<p>Automation contain 1 PLC and 3 Kuka robots. Robot R1 taking off parts from IMM. Robot R2 has cutting knife and flame burner. Robot R3 has tool for take up part from R1.</p> <p>R1 take off parts from IMM and dependet on selected option. First option - R1 deposit a part on the conveyor. Second is that R1 work with R2. R1 waiting for process done from R2 and then continue to depocit on the conveyor. Third option is to collaborate with all three robots. R1 passes on R3 with part. After take up R1 continue back to IMM and waiting for next part done. Meanwhile R3 collaborate with R2 on the process. Then R3 deposit part on the conveyor belt. R1 is waiting for R3 process done.</p> <p>There is next tool like a hot air gun. Robot R1 colaborate with this tool dependet on the selected option.</p> <p>Automation has two conveyor belts. One for parts and second for cutoff parts. </p>"},{"location":"magna/231080%20-%20IMM%2025/Overview/#plc","title":"PLC","text":"<p>PLC contain safety functions, I/O signals from/to robots and some other functions like a analog value to flame burner. PLC is using integrated webserver to watch and edit variables and signals.</p>"},{"location":"magna/231080%20-%20IMM%2025/Overview/#kuka","title":"KUKA","text":"<p>Robot R1 have a main functions to control automation. Other robots R2 and R3 have a less functions than R1.</p> <p>Robots have custom sub program to monitor gripper air pressure which is able to detect lost of part from gripper. This program activate interrupt and do program routine like a robot stop and open dialog on KRC panel.</p>"},{"location":"magna/231080%20-%20IMM%2025/Robots/","title":"231080 - Robots functions","text":""},{"location":"magna/231080%20-%20IMM%2025/Robots/#homes","title":"Homes","text":"<p>Robot R1 has a home position according to the customer's request. R2 and R3 have the home position facing upwards for safety reasons (R2 has a sharp knife and flame burner).</p>"},{"location":"magna/231080%20-%20IMM%2025/Robots/#air","title":"Air","text":"<p>Air pressure is enabled by PLC with safety signals and robot signal. Robot has function to toggle the air pressure. When all robots are without move for more then 3 hours the air pressure is disabled. </p> <p>Enabling air pressure</p> <p>To re-enable the air pressure is needed to press button \"Acknowledge errors\", press button \"Start cycle\" or simply move with robot (if you want air pressure in T1 mode).</p> Code example Air pressure control<pre><code>IF $ROB_STOPPED AND DI_R2_ROB_STOPPED AND DI_R3_ROB_STOPPED AND $IN_HOME AND DI_ROB2_JE_HOME AND DI_ROB3_JE_HOME THEN\n    IF bCLK_1_TIME_PER_SEC THEN\n    iVzduch_Life = iVzduch_Life + 1\n    IF iVzduch_Life &gt;= iVzduch_CAS THEN\n        iVzduch_Life = 0\n        DO_ZAP_VZDUCH = FALSE\n    ENDIF\n    ENDIF\nELSE      \n    iVzduch_Life = 0\n    DO_ZAP_VZDUCH = TRUE\nENDIF\n\nIF $EXT_START OR DI_PB_ACK_ERROR THEN\n    iVzduch_Life = 0\n    DO_ZAP_VZDUCH = TRUE\nENDIF\n</code></pre>"},{"location":"magna/231080%20-%20IMM%2025/Robots/#hot-air-gun","title":"Hot air gun","text":"<p>Hot air gun is controlled by robot and physical switch. </p> <p>Enabling hot air gun</p> <p>Switch on to enable 24 V for control hot air gun. Robot on start cycle loop enable the heating. </p> <p>Disabling hot air gun</p> <p>After robot done and stopped loop then robot turn off heating. If physical switch is turned off then here is couple of minutes until the 24 V is disabled because of safety hot air gun (must be off heating and few moment air on to cool down).</p> Code example Hot air control control<pre><code>IF DI_POUZIT_HORKOVZ THEN\n    DO_HORKOVZ_ON = TRUE\n    HORKOVZ_LIFE = 0\nELSE\n    DO_HORKOVZ_START = FALSE\n    IF bCLK_1_TIME_PER_SEC THEN\n        HORKOVZ_LIFE = HORKOVZ_LIFE + 1\n        IF HORKOVZ_LIFE &gt;= 180 THEN ; seconds to off\n            HORKOVZ_LIFE = 0\n            DO_HORKOVZ_ON = FALSE\n        ENDIF\n    ENDIF\nENDIF\n\nIF NOT DI_IMM_IN_AUTOMATIC AND $EXT THEN\n    DO_HORKOVZ_START = FALSE\nENDIF\n</code></pre>"},{"location":"magna/231080%20-%20IMM%2025/Robots/#conveyor-belts","title":"Conveyor belts","text":"<p>Robots R1 and R3 can control the conveyors. R1 have a main logic to control conveyors and R3 only send blocking signal to R1.</p>"},{"location":"tools/Adapter_settings/Adapter_settings/","title":"Adapter settings","text":""},{"location":"tools/Adapter_settings/Adapter_settings/#overview","title":"Overview","text":"<p>This program is used for change IP of ethernet adapter more easily then from control panel.</p> <p>Program must run as administrator. Program is created to change IPv4, subnet and gateway on selected adapter. Allow to set static IP or dynamic IP.</p>"},{"location":"tools/Adapter_settings/Adapter_settings/#installation","title":"Installation","text":"<p>Follow this guide to get this appliaction on your machine.  </p> <ol> <li>Download app from here.</li> <li>Download icon for this app from here.</li> <li>Locate file to folder where you want to save this app.</li> <li>Right click on the app and go to properties -&gt; Compatibility tab -&gt; check \"Run this program as administrator\" -&gt; apply and ok.</li> <li>Right click on the app and create shortcut.</li> <li>Right click on the created shortcut -&gt; select Properties -&gt; Tab Short -&gt; Change icon -&gt; select downloaded ico -&gt; apply and ok.  </li> <li>Use created shortcut to start app.</li> </ol>"},{"location":"tools/AutoHotKey/Autohotkey/","title":"AutoHotKey","text":"<p>Is the system for programmers to speed up writing code. You can create dialogs and also code templates in much better way then integrated tools in B+R Automation Studio, Siemens Tia Portal or Beckhoff Twincat. Generaly you can use it in every text sw you wish. </p> <p>Download script from here.</p> <p>You can start manually or at startup.  Look to file to observe possible shortcuts.</p>"},{"location":"tools/Kicad/Kicad/","title":"Kicad 8.0 for use in WHS","text":""},{"location":"tools/Kicad/Kicad/#overview","title":"Overview","text":"<p>Used for projecting electronic devices like lights, camera equipments, IO-Link device module and etc.</p>"},{"location":"tools/Kicad/Kicad/#installation-kicad","title":"Installation Kicad","text":"<ol> <li>Install Kicad on your system. Follow this manual</li> <li>Do not import previous settings.</li> <li>Very important is correctly set pathes. Create folder for libraries. You can choose path by your preferences eg. <code>C:\\WHS_Kicad_Libraries</code>.</li> <li>Create system variable. On windows go to cmdline as administrator and type  <pre><code>setx WHS_KICAD_LIBRARIES C:\\WHS_Kicad_Libraries /M\n</code></pre> </li> </ol>"},{"location":"tools/Kicad/Kicad/#installation-library-loader","title":"Installation Library loader","text":"<p>Used for automatic converting downloaded part to Kicad format.</p> <ol> <li>Install library loader from site samacsys</li> <li>Create your own account on https://componentsearchengine.com/</li> <li>Set download folder to scanning in library loader eg<code>C:\\WHS_Kicad_Temp</code>.  When you have switched on library loader and download anything to this   folder library loader automatically add new part to temporary Kicad library located there. This library will not be joined to KICAD IDE. </li> <li> <p>Adjust settings of library loader profile. Click on profile</p> <p> </p> </li> <li> <p>Adjust location for temporary library. </p> <p></p> </li> </ol>"},{"location":"tools/Kicad/Kicad/#whs-kicad-library-converter","title":"WHS Kicad library converter","text":"<p>Internal app to manage libraries in Kicad. Has these functions:</p> <ol> <li>Copy new part from temp library of Library Loader</li> <li>Copy new part from other libraries to whs structure</li> <li>Adds ERP property - user should fill. </li> <li>Can add selected part to HELIOS. (is planned feature, not now) </li> <li>Copy all files to correct whs library</li> <li>Sets all library links from WHS_Kicad_Libraries to KICAD.</li> <li>Pushes git to server also when export data to Helios</li> <li>During installation automatically download library from GIT to  <code>C:\\WHS_Kicad_Libraries</code></li> </ol> <p>Installation   </p> <ol> <li>The app is only plugin to use in Kicad. </li> <li>Download release from GitHub (Sw is in production). The access can give you Martin Myslikovjan, Roman Tom\u00e1\u0161ek or somebody from management.</li> <li>Adjust config.json file next the run file. And adjust the patches. <pre><code>    \"watched_folder\": \"C:\\\\WHS_Kicad_Libraries\"\n    \"symbol_lib_file\": \"C:\\\\Users\\\\rt\\\\AppData\\\\Roaming\\\\kicad\\\\\\8.0\\\\sym-lib-table\"\n    \"footprint_lib_file\": \"C:\\\\Users\\\\rt\\\\AppData\\\\Roaming\\\\kicad\\\\\\8.0\\\\fp-lib-table\"\n</code></pre> </li> </ol>"},{"location":"tools/Kicad/Kicad/#debuging-and-developing","title":"Debuging and developing","text":"<ol> <li>Execute code from root by typing <code>python src/main.py</code> </li> <li>In VScode start test from test page.    </li> <li>Start test from terminal. <code>python tests/test.py</code> </li> </ol>"}]}